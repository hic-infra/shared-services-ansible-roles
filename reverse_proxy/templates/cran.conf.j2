server {
  listen 80;
  server_name cran.{{zone}};

  # Internal only endpoint for performing a proxy pass to the cran mirror.
  location /cran-fetch {
    internal;
    proxy_pass {{cran_mirror}};
  }

  # Define an EICAR endpoint for verifying that the reverse proxy is
  # scanning correctly.
  location /cran-fetch/eicar.zip {
    internal;
    rewrite_by_lua_block {
      ngx.say("X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*")
    }
  }

  location / {
    # prevent cyclic location.capture
    if ($request_uri ~ /cran-fetch) { break; }

    # ensure we are only processing GET requests
    rewrite_by_lua_block {
      function reject ()
        ngx.exit(403)
      end

      function ends_with (s, e)
        return s:sub(-#e) == e
      end

      -- Verify that the request method is GET, since PUT and POST are more likely
      -- to lead to egress (in the worst case...)
      local method = ngx.var.request_method
      if method ~= "GET" then
        reject()
      end

      -- Define a list of valid file extensions. CRAN packages always use .tar.gz,
      -- .tar.bzip or .zip. PACKAGES is needed for the package listing. Some additional
      -- web files (e.g. html and css) are included for browsing the mirror in browser.
      local valid = false
      local extensions = {
        '.html', '.css', '.svg', '.tar.gz', '.tar.bzip', '.zip', "PACKAGES"
      }
      for e=1,#extensions do
        valid = valid or ends_with(ngx.var.uri, extensions[e])
      end

      if not valid then reject() end

      -- Perform a fetch using the internal cran-fetch endpoint. Everything after the
      -- "/cran-fetch" is passed to the configured cran mirror.
      local res = ngx.location.capture("/cran-fetch" .. ngx.var.uri);

      local path = os.tmpname()

      local file = io.open(path, "w")
      file:write(res.body)
      file:close()

      -- Launch the antivirus scanner on the temporary file.
      local t_start = os.clock()
      local ret = os.execute("/opt/sophos-spl/plugins/av/bin/avscanner " .. path)
      local t_end = os.clock()

      os.remove(path)

      -- Add some headers for debugging and verifying things are working. :)
      ngx.header["X-Sophos-Return-Code"] = tostring(ret)
      ngx.header["X-Sophos-Temporary-File"] = path
      ngx.header["X-Sophos-Scan-Timer"] = tostring(t_end - t_start) .. " cpu seconds"

      if ret == 0 then
        ngx.say(res.body)
      else
        ngx.header["Content-Type"] = "text/plain"
        ngx.say("Mallicious content was detected in the requested file.")
      end
    }
  }
}

