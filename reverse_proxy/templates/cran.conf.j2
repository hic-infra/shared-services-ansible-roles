server {
  listen 80;
  server_name cran.{{zone}};

  location /cran-fetch {
    internal;
    proxy_pass {{cran_mirror}};
  }

  location / {
    # prevent cyclic location.capture
    if ($request_uri ~ /cran-fetch) { break; }

    # ensure we are only processing GET requests
    access_by_lua_block {
      function reject ()
        ngx.exit(403)
      end

      local method = ngx.var.request_method
      if method ~= "GET" then
        reject()
      end
    }

    # rewrite the request so we have an opportunity to scan the file
    rewrite_by_lua_block {
      local res = ngx.location.capture("/cran-fetch" .. ngx.var.uri);

      local path = os.tmpname()

      local file = io.open(path, "w")
      file:write(res.body)
      file:close()

      local t_start = os.clock()
      local ret = os.execute("/opt/sophos-spl/plugins/av/bin/avscanner " .. path)
      local t_end = os.clock()

      os.remove(path)

      ngx.header["X-Sophos-Return-Code"] = tostring(ret)
      ngx.header["X-Sophos-Temporary-File"] = path
      ngx.header["X-Sophos-Scan-Timer"] = tostring(t_end - t_start) .. " cpu seconds"

      if ret == 0 then
        ngx.say(res.body)
      else
        ngx.header["Content-Type"] = "text/plain"
        ngx.say("Mallicious content was detected in the requested file.")
      end

    }
  }
}

