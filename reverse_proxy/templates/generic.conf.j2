server {
  listen 80;
  server_name {{ generic_name }}.{{zone}};

  # Internal only endpoint for performing a proxy pass to the cran mirror.
  location /{{ generic_name }}-fetch {
    internal;
    proxy_pass {{ upstream_endpoint }};
  }

  # Define an EICAR endpoint for verifying that the reverse proxy is
  # scanning correctly.
  location /{{ generic_name }}-fetch/{{ eicar_path }} {
    internal;
    rewrite_by_lua_block {
      ngx.print("X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*")
    }
  }

  location ~ {{ endpoint_regex }} {
    # ensure we are only processing GET requests
    rewrite_by_lua_block {
      function reject ()
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end

      function tlen (t)
        local c = 0
	for _ in pairs(t) do c = c + 1 end
	return c
      end

      -- Verify that the request method is GET, since PUT and POST are more likely
      -- to lead to egress (in the worst case...)
      local method = ngx.var.request_method
      if method ~= "GET" then
        reject()
      end

      -- Ensure no GET parameters have been included
      local args, _ = ngx.req.get_uri_args()
      if tlen(args) > 0 then reject() end

      -- Perform a fetch using the internal {{ generic_name }} endpoint. Everything after the
      -- "/{{ generic_name }}" is passed to the configured cran mirror.
      ngx.log(ngx.STDERR, ngx.var.uri)
      local res = ngx.location.capture("/{{ generic_name }}-fetch" .. ngx.var.uri);
      if res.status ~= ngx.HTTP_OK then
        ngx.status = res.status
        ngx.header["Content-Type"] = "text/plain"
        ngx.say("An error occurred while fetching the requested file.")
        ngx.exit(ngx.HTTP_OK)
      end

      -- Get the headers to ensure we return the correct Content-Type
      local ctype = res.header['Content-Type']
      local cenc  = res.header['Content-Encoding']
      ngx.header["Content-Type"] = ctype
      ngx.header["Content-Encoding"] = cenc

      local path = os.tmpname()

      local file = io.open(path, "w")
      file:write(res.body)
      file:close()

      -- Launch the antivirus scanner on the temporary file.
      local t_start = os.clock()
      local ret = os.execute("{{ av_scanner }} " .. path)
      local t_end = os.clock()

      os.remove(path)

      -- Add some headers for debugging and verifying things are working. :)
      ngx.header["X-{{ av_scanner_header_name }}-Return-Code"] = tostring(ret)
      ngx.header["X-{{ av_scanner_header_name }}-Temporary-File"] = path
      ngx.header["X-{{ av_scanner_header_name }}-Scan-Timer"] = tostring(t_end - t_start) .. " cpu seconds"

      if ret == 0 then
        ngx.print(res.body)
      else
        ngx.status = ngx.HTTP_BAD_GATEWAY
        ngx.header["Content-Type"] = "text/plain"
        ngx.say("Malicious content was detected in the requested file.")
	ngx.exit(ngx.HTTP_OK)
      end
    }
  }

  location / {
    # Default to HTTP Forbidden
    return 403;
  }
}

