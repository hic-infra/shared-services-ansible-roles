---
- name: Verify
  hosts: all
  gather_facts: false
  tasks:
  - name: get service status
    service_facts:
    register: services

  - name: nginx is installed
    assert:
      that: services.ansible_facts.services.nginx is defined
      fail_msg: "No nginx service was defined"
      success_msg: "Nginx service found!"

  - name: nginx is running
    assert:
      that: services.ansible_facts.services['nginx.service'].state == "running"
      fail_msg: "The nginx service does not appear to be running"
      success_msg: "Nginx service is running"

  - name: nginx is enabled
    assert:
      that: services.ansible_facts.services['nginx.service'].status == "enabled"
      fail_msg: "The nginx service is not enabled (set to start at boot)"
      success_msg: "The nginx service will start automatically"

  - name: interact with with git via smart http directly
    become: true
    shell: |
      [ -d repo ] && rm -rf repo
      git clone http://user:password@localhost:8888/test.git repo
      cd repo
      git status
      git pull origin master
      git commit --allow-empty -m "A commit"
      git push origin master
    register: git_direct
    changed_when: false
    failed_when: false

  - name: ensure git clone of a public repo was successful
    assert:
      that: git_direct.rc == 0
      fail_msg: "Cloning a public repo failed"
      success_msg: "Cloning a public repo was successful"

  - name: pull via proxy
    become: true
    shell: |
      [ -d repo ] && rm -rf repo
      git clone http://user:password@localhost/test.git repo
      cd repo
      git status
      git pull origin master
    register: git_pull_proxy
    changed_when: false
    failed_when: false

  - name: ensure git clone of a public repo was successful
    assert:
      that: git_pull_proxy.rc == 0
      fail_msg: "Cloning a repo via proxy failed"
      success_msg: "Cloning a repo via proxy was successful"

  - name: push via proxy
    become: true
    shell: |
      cd repo
      git commit --allow-empty -m "A commit"
      git push origin master
    register: git_push_proxy
    changed_when: false
    failed_when: false

  - name: ensure git push via proxy fails
    assert:
      that: git_push_proxy.rc != 0
      fail_msg: "Git push via the proxy should not have succeeded!"
      success_msg: "Pushing via proxy failed."
